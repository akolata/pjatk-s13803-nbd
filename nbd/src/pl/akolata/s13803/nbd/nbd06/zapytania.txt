1.
MATCH p=shortestPath((d:town {name:'Darjeeling'})-[*]->(s:peak {name:'Sandakphu'})) RETURN p
2.
MATCH p=shortestPath((d:town {name:'Darjeeling'})-[*]->(s:peak {name:'Sandakphu'}))
WHERE ALL(r in relationships(p) WHERE r.winter= 'true')
RETURN p
3.
MATCH p=(d:town {name:'Darjeeling'})-[*]->(s:peak {name:'Sandakphu'})
WITH reduce(total=0, r IN relationships(p) | total + r.distance) AS d, p
ORDER BY d
RETURN p, d
4.
MATCH (f:Flight)-[:ORIGIN]->(a:Airport)
WITH a, count(f) as flightsOriginCount
ORDER BY flightsOriginCount
RETURN a, flightsOriginCount

5.
MATCH (origin:Airport)<-[:ORIGIN]-(flight:Flight)-[:DESTINATION]->(destination:Airport), (flight)<-[:ASSIGN]-(ticket:Ticket)
WITH origin,destination,flight,ticket
CREATE (origin)-[r:FLIGHT_TICKET {price: ticket.price, class:ticket.class, origin: origin.name, destination: destination.name}]->(destination)
RETURN r;

MATCH p=(origin: Airport {name: 'LAX'})-[:FLIGHT_TICKET*1..3]->(destination: Airport)
WITH reduce(totalPrice=0, r IN relationships(p) | totalPrice + r.price) AS totalPrice, p
  ORDER BY totalPrice DESC
  WHERE totalPrice < 3000
  AND destination.name <> 'LAX'
  AND all(i IN relationships(p) WHERE i.destination <> 'LAX')
RETURN p, totalPrice

6. --- brak wyników
MATCH p=(origin: Airport {name: 'LAX'})-[:FLIGHT_TICKET*1..3]->(destination: Airport {name: 'DAY'})
WITH reduce(totalPrice=0, r IN relationships(p) | totalPrice + r.price) AS totalPrice, p
  ORDER BY totalPrice ASC
  WHERE destination.name <> 'LAX'
  AND all(i IN relationships(p) WHERE i.destination <> 'LAX')
RETURN p, totalPrice

7. --- brak wyników
MATCH p=(origin: Airport {name: 'LAX'})-[:FLIGHT_TICKET*1..3]->(destination: Airport {name: 'DAY'})
WITH reduce(totalPrice=0, r IN relationships(p) | totalPrice + r.price) AS totalPrice, p
  ORDER BY totalPrice ASC
  WHERE destination.name <> 'LAX'
  AND all(i IN relationships(p) WHERE i.destination <> 'LAX')
RETURN p, totalPrice
LIMIT 1

8.  --- brak wyników
MATCH p=(origin: Airport {name: 'LAX'})-[:FLIGHT_TICKET*1..3]->(destination: Airport {name: 'DAY'})
WITH reduce(totalPrice=0, r IN relationships(p) | totalPrice + r.price) AS totalPrice, p
  ORDER BY totalPrice ASC
  WHERE destination.name <> 'LAX'
  AND all(i IN relationships(p) WHERE i.destination <> 'LAX' AND i.class = 'business')
RETURN p, totalPrice
LIMIT 1

9.
MATCH (origin:Airport)<-[:ORIGIN]-(flight:Flight)-[:DESTINATION]->(destination:Airport)
UNWIND [origin, destination] as airportTuple
RETURN flight.airline as airline, count(distinct airportTuple) as airportTuple

10.
MATCH p=(origin:Airport)-[ft1:FLIGHT_TICKET]->(airportStop:Airport)-[ft2:FLIGHT_TICKET]->(destination:Airport)
WITH reduce(totalPrice=0, r IN relationships(p) | totalPrice + r.price) AS totalPrice, p
ORDER BY totalPrice ASC
  WHERE  origin.name <> airportStop.name
  AND origin.name <> destination.name
  AND destination.name <> airportStop.name
RETURN p, totalPrice
LIMIT 1
